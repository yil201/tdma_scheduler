#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <sys/time.h>

#define NUM_PACKETS 1000
#define PAYLOAD_SIZE 1024

int main(int argc, char **argv) {
    struct sockaddr_in addr;
    char payload[PAYLOAD_SIZE];
    int sockfd, i, bytes_sent;
    struct timeval start_time, end_time;
    double total_time;

    // Create a socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("socket() failed");
        exit(EXIT_FAILURE);
    }

    // Connect to the server
    memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = inet_addr("SERVER_IP_ADDRESS");
    addr.sin_port = htons(1234);
    if (connect(sockfd, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
        perror("connect() failed");
        exit(EXIT_FAILURE);
    }

    // Initialize payload
    memset(payload, 'A', PAYLOAD_SIZE);

    // Measure time to send NUM_PACKETS packets
    gettimeofday(&start_time, NULL);
    for (i = 0; i < NUM_PACKETS; i++) {
        bytes_sent = send(sockfd, payload, PAYLOAD_SIZE, 0);
        if (bytes_sent < 0) {
            perror("send() failed");
            exit(EXIT_FAILURE);
        }
    }
    gettimeofday(&end_time, NULL);

    // Calculate total time taken
    total_time = (end_time.tv_sec - start_time.tv_sec) + 
                 (end_time.tv_usec - start_time.tv_usec) / 1000000.0;

    // Print results
    printf("%d packets sent in %.3f seconds (%.3f packets per second)\n",
           NUM_PACKETS, total_time, NUM_PACKETS / total_time);

    // Clean up
    close(sockfd);

    return 0;
}